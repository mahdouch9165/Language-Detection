{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1e1nodUSnwiIiUz7oNoXgVzGg6y2Uxk_7","authorship_tag":"ABX9TyO3JHvnDIFgWltCTUQLH63/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["%pip install -qU python-iso639 pycm"],"metadata":{"id":"6idEIK12-8Q-","executionInfo":{"status":"ok","timestamp":1718387222250,"user_tz":240,"elapsed":16477,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":125,"outputs":[]},{"cell_type":"code","execution_count":126,"metadata":{"id":"uvknd3DR2r7d","executionInfo":{"status":"ok","timestamp":1718387222252,"user_tz":240,"elapsed":184,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"outputs":[],"source":["from pathlib import Path\n","import sys\n","import shutil\n","import json\n","\n","import pandas as pd\n","import seaborn as sns\n","import sklearn\n","from sklearn.metrics import ConfusionMatrixDisplay\n","import numpy as np\n","import iso639\n","import pycm\n","import openpyxl\n","from openpyxl.utils.cell import get_column_letter\n","\n","sys.path.append(\"/content/drive/MyDrive/Colab Notebooks/\")\n","import global_id_utils"]},{"cell_type":"code","source":["report_template_path: Path = Path(\"/content/drive/MyDrive/Colab Notebooks/report template.xlsx\")"],"metadata":{"id":"B2aUHbVfHMyg","executionInfo":{"status":"ok","timestamp":1718387222252,"user_tz":240,"elapsed":182,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":127,"outputs":[]},{"cell_type":"code","source":["# evaluation_output_dir: Path = Path(\"/content/drive/MyDrive/LangId Evaluation/sanchit-gandhi_whisper-medium-fleurs-lang-id on PolyAI_minds14/2024-06-09_00-35-38\")\n","model_output_dir: Path = Path(\"/content/drive/MyDrive/LangId Evaluation/facebook_mms-lid-4017 on PolyAI_minds14/2024-06-14_16-15-51\")"],"metadata":{"id":"I8yhHMuP3LpV","executionInfo":{"status":"ok","timestamp":1718387222253,"user_tz":240,"elapsed":182,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":128,"outputs":[]},{"cell_type":"code","source":["report_output_dir = model_output_dir / \"reports\"\n","report_output_dir.mkdir(exist_ok=True)"],"metadata":{"id":"eBbCDEuy9gbA","executionInfo":{"status":"ok","timestamp":1718387222254,"user_tz":240,"elapsed":181,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":129,"outputs":[]},{"cell_type":"code","source":["predictions = (pd\n","                .read_json(model_output_dir / \"predictions.json\")\n","                .rename(columns={\n","                  \"predictions\": \"predicted_id\",\n","                  \"labels\": \"true_id\"\n","                }))"],"metadata":{"id":"O7ZejLPI6hag","executionInfo":{"status":"ok","timestamp":1718387222254,"user_tz":240,"elapsed":177,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":130,"outputs":[]},{"cell_type":"markdown","source":["# Create report sheets"],"metadata":{"id":"GTvHhpGE9lgI"}},{"cell_type":"code","source":["predictions[\"predicted_lang\"] = predictions[\"predicted_id\"].map(lambda x: global_id_utils.global_id_to_lang(x).name)\n","predictions[\"predicted_lang_abrev\"] = predictions[\"predicted_id\"].map(global_id_utils.global_id_to_iso639_part3)\n","\n","predictions[\"true_lang\"] = predictions[\"true_id\"].map(lambda x: global_id_utils.global_id_to_lang(x).name)\n","predictions[\"true_lang_abrev\"] = predictions[\"true_id\"].map(global_id_utils.global_id_to_iso639_part3)\n","\n","predictions[\"correct\"] = (predictions[\"predicted_id\"] == predictions[\"true_id\"])\n","predictions"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"QlxhXb8jCN8M","executionInfo":{"status":"ok","timestamp":1718387222255,"user_tz":240,"elapsed":177,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"outputId":"2a41b908-5862-4054-83d2-956e25098c7a"},"execution_count":131,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   predicted_id  true_id predicted_lang predicted_lang_abrev true_lang  \\\n","0          5902     5902        Italian                  ita   Italian   \n","1          5902     5902        Italian                  ita   Italian   \n","2         12030    12030        Russian                  rus   Russian   \n","3          3822     3822         French                  fra    French   \n","4          3048     3048        English                  eng   English   \n","\n","  true_lang_abrev  correct  \n","0             ita     True  \n","1             ita     True  \n","2             rus     True  \n","3             fra     True  \n","4             eng     True  "],"text/html":["\n","  <div id=\"df-2ffb7e5a-be84-4afb-80df-7c7a1a8085d5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>predicted_id</th>\n","      <th>true_id</th>\n","      <th>predicted_lang</th>\n","      <th>predicted_lang_abrev</th>\n","      <th>true_lang</th>\n","      <th>true_lang_abrev</th>\n","      <th>correct</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5902</td>\n","      <td>5902</td>\n","      <td>Italian</td>\n","      <td>ita</td>\n","      <td>Italian</td>\n","      <td>ita</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5902</td>\n","      <td>5902</td>\n","      <td>Italian</td>\n","      <td>ita</td>\n","      <td>Italian</td>\n","      <td>ita</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12030</td>\n","      <td>12030</td>\n","      <td>Russian</td>\n","      <td>rus</td>\n","      <td>Russian</td>\n","      <td>rus</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3822</td>\n","      <td>3822</td>\n","      <td>French</td>\n","      <td>fra</td>\n","      <td>French</td>\n","      <td>fra</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3048</td>\n","      <td>3048</td>\n","      <td>English</td>\n","      <td>eng</td>\n","      <td>English</td>\n","      <td>eng</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ffb7e5a-be84-4afb-80df-7c7a1a8085d5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2ffb7e5a-be84-4afb-80df-7c7a1a8085d5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2ffb7e5a-be84-4afb-80df-7c7a1a8085d5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-1d26c7bc-2fe0-4653-8768-f402ef679237\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d26c7bc-2fe0-4653-8768-f402ef679237')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-1d26c7bc-2fe0-4653-8768-f402ef679237 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f97db05e-6dde-4f53-8c3b-9a944b74aa70\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('predictions')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f97db05e-6dde-4f53-8c3b-9a944b74aa70 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('predictions');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"predictions","summary":"{\n  \"name\": \"predictions\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"predicted_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3526,\n        \"min\": 3048,\n        \"max\": 12030,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12030,\n          3048,\n          5902\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3526,\n        \"min\": 3048,\n        \"max\": 12030,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12030,\n          3048,\n          5902\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_lang\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Russian\",\n          \"English\",\n          \"Italian\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predicted_lang_abrev\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"rus\",\n          \"eng\",\n          \"ita\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true_lang\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Russian\",\n          \"English\",\n          \"Italian\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"true_lang_abrev\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"rus\",\n          \"eng\",\n          \"ita\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"correct\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":131}]},{"cell_type":"markdown","source":["## Performance"],"metadata":{"id":"wLg8WDe4h7_B"}},{"cell_type":"code","source":["with open(model_output_dir / \"metadata.json\", \"r\") as metadata_file:\n","  metadata = json.load(metadata_file)"],"metadata":{"id":"jSXTNXoPh94V","executionInfo":{"status":"ok","timestamp":1718387222257,"user_tz":240,"elapsed":176,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":132,"outputs":[]},{"cell_type":"code","source":["metadata"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hLo5pV6Pl9ie","executionInfo":{"status":"ok","timestamp":1718387222257,"user_tz":240,"elapsed":173,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"outputId":"7c874c2d-2ff2-4975-a2e0-9b1d7e6e1848"},"execution_count":133,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'dataset_id': 'PolyAI/minds14',\n"," 'dataset_config': 'all',\n"," 'dataset_split': 'train',\n"," 'dataset_load_command': 'datasets.load_dataset(dataset_id, \"all\", split=\"train\").shuffle(seed=42).select(range(5))',\n"," 'model_id': 'facebook/mms-lid-4017',\n"," 'comments': ''}"]},"metadata":{},"execution_count":133}]},{"cell_type":"markdown","source":["## Confusion Matrix"],"metadata":{"id":"RSYwKJ2jfjx1"}},{"cell_type":"code","source":["cm = pycm.ConfusionMatrix(predictions[\"true_lang\"].to_list(), predictions[\"predicted_lang\"].to_list())"],"metadata":{"id":"GfOZMpY4isky","executionInfo":{"status":"ok","timestamp":1718387222258,"user_tz":240,"elapsed":157,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":134,"outputs":[]},{"cell_type":"code","source":["cm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uuNw1guyg54b","executionInfo":{"status":"ok","timestamp":1718387222260,"user_tz":240,"elapsed":157,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"outputId":"f7582365-f65f-494c-8ae2-7858edd49d27"},"execution_count":135,"outputs":[{"output_type":"execute_result","data":{"text/plain":["pycm.ConfusionMatrix(classes: ['English', 'French', 'Italian', 'Russian'])"]},"metadata":{},"execution_count":135}]},{"cell_type":"code","source":["cm_pd = pd.DataFrame(cm.table)"],"metadata":{"id":"yZfRlwO4emj1","executionInfo":{"status":"ok","timestamp":1718387222261,"user_tz":240,"elapsed":114,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":136,"outputs":[]},{"cell_type":"code","source":["disp = ConfusionMatrixDisplay.from_predictions(\n","  predictions[\"true_lang\"],\n","  predictions[\"predicted_lang\"],\n","  # cmap=plt.cm.Blues,\n","  normalize=\"true\",\n","  include_values=False,\n","  text_kw={\"size\": 4},\n","  xticks_rotation=\"vertical\",\n",")\n","disp.ax_.set_title(\"Confusion matrix, normalized over true\")\n","disp.ax_.tick_params(axis=\"both\", which=\"major\", labelsize=6)\n","\n","disp.figure_.tight_layout()\n","disp.figure_.savefig(report_output_dir / \"confusion_matrix_normalized_true.png\")\n","\n","# print(disp.confusion_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"aP7O_1dDWpZ_","executionInfo":{"status":"ok","timestamp":1718387222262,"user_tz":240,"elapsed":113,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"outputId":"93b03564-7094-4bfc-d674-0d33d99c1beb"},"execution_count":137,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Simple Class stats"],"metadata":{"id":"UaeHZaEh7JIU"}},{"cell_type":"code","source":["stats_df = pd.DataFrame.from_dict(cm.class_stat)"],"metadata":{"id":"iQMwL4HtnTol","executionInfo":{"status":"ok","timestamp":1718387222263,"user_tz":240,"elapsed":111,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":138,"outputs":[]},{"cell_type":"code","source":["simple_class_stats_df = pd.DataFrame()\n","# stats_df[[\"PPV\", \"TPR\", \"F1\", \"P\", \"PRE\"]]\n","simple_class_stats_df[[\"Precision\", \"Recall/Sensitivity\", \"F1\", \"Support\", \"Prevalence\"]] = stats_df[[\"PPV\", \"TPR\", \"F1\", \"P\", \"PRE\"]]"],"metadata":{"id":"VwmeeIjMrVqC","executionInfo":{"status":"ok","timestamp":1718387222264,"user_tz":240,"elapsed":110,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":139,"outputs":[]},{"cell_type":"code","source":["true_langs_in_dataset = predictions[\"true_lang\"].unique()"],"metadata":{"id":"2RkEMVQC5-0Z","executionInfo":{"status":"ok","timestamp":1718387222264,"user_tz":240,"elapsed":104,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":140,"outputs":[]},{"cell_type":"code","source":["simple_class_stats_df = simple_class_stats_df[simple_class_stats_df.index.isin(true_langs_in_dataset)]"],"metadata":{"id":"zOFh-CJl6BgW","executionInfo":{"status":"ok","timestamp":1718387222265,"user_tz":240,"elapsed":103,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":141,"outputs":[]},{"cell_type":"markdown","source":["## Inference performance report"],"metadata":{"id":"P7CfIMMY7Kpc"}},{"cell_type":"code","source":["performance = pd.read_json(model_output_dir / \"inference_metrics.json\", typ='series')"],"metadata":{"id":"6DY6lqaX7GWp","executionInfo":{"status":"ok","timestamp":1718387222266,"user_tz":240,"elapsed":103,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":142,"outputs":[]},{"cell_type":"code","source":["performance.index = [\"Loss\", \"Accuracy\", \"Runtime (s)\", \"Samples/second\", \"Steps/second\"]"],"metadata":{"id":"rBBwvSSO77tq","executionInfo":{"status":"ok","timestamp":1718387222268,"user_tz":240,"elapsed":102,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":143,"outputs":[]},{"cell_type":"code","source":["performance[\"Total samples\"] = len(predictions)"],"metadata":{"id":"9raPVF0s2nRg","executionInfo":{"status":"ok","timestamp":1718387222268,"user_tz":240,"elapsed":100,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":144,"outputs":[]},{"cell_type":"code","source":["performance[\"Overall Accuracy\"] = cm.Overall_ACC\n","performance[\"F1 Macro\"] = cm.F1_Macro\n","performance[\"Kappa\"] = cm.Kappa"],"metadata":{"id":"KHwYwR2w5TRm","executionInfo":{"status":"ok","timestamp":1718387222269,"user_tz":240,"elapsed":101,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":145,"outputs":[]},{"cell_type":"code","source":["print(cm.recommended_list)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vq7fnUO8MOf4","executionInfo":{"status":"ok","timestamp":1718387222269,"user_tz":240,"elapsed":100,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"outputId":"b4414fcc-765d-4e32-896f-ef4d1bedf9c1"},"execution_count":146,"outputs":[{"output_type":"stream","name":"stdout","text":["['ERR', 'TPR Micro', 'TPR Macro', 'F1 Macro', 'PPV Macro', 'NPV Macro', 'ACC', 'Overall ACC', 'MCC', 'MCCI', 'Overall MCC', 'SOA6(Matthews)', 'BCD', 'Hamming Loss', 'Zero-one Loss']\n"]}]},{"cell_type":"markdown","source":["# Output report"],"metadata":{"id":"ao7WXOE79hnx"}},{"cell_type":"code","source":["def write_performance(s: pd.Series, writer, metadata: dict):\n","  s.to_excel(writer, sheet_name=\"performance data\")\n","\n","  sheet = writer.book[\"performance\"]\n","  sheet[\"B1\"] = metadata[\"model_id\"]\n","  sheet[\"B2\"] = metadata[\"dataset_id\"]\n","\n","  monospace_font = openpyxl.styles.Font(name=\"Courier New\", size=10)\n","  sheet[\"B1\"].font = monospace_font\n","  sheet[\"B2\"].font = monospace_font"],"metadata":{"id":"MqA4bGNMAqe_","executionInfo":{"status":"ok","timestamp":1718387222269,"user_tz":240,"elapsed":75,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":147,"outputs":[]},{"cell_type":"code","source":["def write_simple_class_stats(df: pd.DataFrame, writer):\n","  workbook = writer.book\n","\n","  simple_class_stats_df.to_excel(writer, sheet_name=\"simple class stats\")\n","  sheet = workbook[\"simple class stats\"]\n","  for col in [\"B\", \"C\", \"D\", \"F\"]:\n","    for row in range(2, sheet.max_row + 1):\n","      sheet[f\"{col}{row}\"].number_format = \"0.000\"\n","  # Set \"support\" column to integers\n","  for row in range(2, sheet.max_row + 1):\n","    sheet[f\"E{row}\"].number_format = \"0\"\n","\n","  sheet.column_dimensions[\"A\"].width = 12\n","\n","  per_language_chart = openpyxl.chart.BarChart()\n","  per_language_chart.type = \"col\"\n","  per_language_chart.style = 10\n","  per_language_chart.title = \"Per language stats\"\n","  per_language_chart.x_axis.title = \"Language\"\n","\n","  f1_data = openpyxl.chart.Reference(sheet, min_col=4, min_row=2, max_row=1+len(df), max_col=4)\n","  f1_series = openpyxl.chart.Series(f1_data, title=\"F1\")\n","  cats = openpyxl.chart.Reference(sheet, min_col=1, min_row=2, max_row=1+len(df))\n","\n","  per_language_chart.append(f1_series)\n","  per_language_chart.set_categories(cats)\n","  per_language_chart.shape = 4\n","  sheet.add_chart(per_language_chart, \"H1\")\n","\n","  img = openpyxl.drawing.image.Image(report_output_dir / \"confusion_matrix_normalized_true.png\")\n","  img.anchor = \"H16\"\n","  sheet.add_image(img)"],"metadata":{"id":"tPxnSuFZ0dzz","executionInfo":{"status":"ok","timestamp":1718387222270,"user_tz":240,"elapsed":75,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":148,"outputs":[]},{"cell_type":"code","source":["def write_confusion_matrix(cm_pd, writer):\n","  workbook = writer.book\n","\n","  cm_pd.to_excel(writer, sheet_name=\"confusion matrix\")\n","  sheet = workbook[\"confusion matrix\"]\n","  for column_cells in sheet.columns:\n","    sheet.column_dimensions[openpyxl.utils.get_column_letter(column_cells[0].column)].width = 20 * 1/7\n","  sheet.column_dimensions[\"A\"].width = 60 * 1/7\n","  for row_cells in sheet.rows:\n","    sheet.row_dimensions[row_cells[0].row].height = 20 * 10/13\n","  sheet.row_dimensions[1].height = 60 * 10/13\n","\n","  for col in range(1, len(cm_pd) + 2):\n","    sheet[openpyxl.utils.get_column_letter(col) + \"1\"].alignment = openpyxl.styles.alignment.Alignment(textRotation=90)\n","\n","  rule = openpyxl.formatting.rule.ColorScaleRule(start_type=\"percentile\", start_value=0, start_color=\"FFFFFF\",\n","                        end_type=\"percentile\", end_value=100, end_color=\"57BB8A\")\n","\n","  sheet.conditional_formatting.add(\"B2:\" + get_column_letter(1 + len(cm_pd)) + str(1 + len(cm_pd)), rule)"],"metadata":{"id":"0K7_s3SIFJU6","executionInfo":{"status":"ok","timestamp":1718387222270,"user_tz":240,"elapsed":73,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":149,"outputs":[]},{"cell_type":"code","source":["shutil.copy(report_template_path, model_output_dir / \"reports\" / \"report.xlsx\")\n","with pd.ExcelWriter(model_output_dir / \"reports\" / \"report.xlsx\", engine=\"openpyxl\", if_sheet_exists=\"replace\", mode=\"a\") as writer:\n","  workbook = writer.book\n","  write_performance(performance, writer, metadata)\n","  write_simple_class_stats(simple_class_stats_df, writer)\n","  predictions.to_excel(writer, sheet_name=\"predictions\")\n","  stats_df.to_excel(writer, sheet_name=\"all stats\")\n","  write_confusion_matrix(cm_pd, writer)\n","\n","  writer.book.move_sheet(\"performance data\", 5)\n"],"metadata":{"id":"tlFqoFZq7HrZ","executionInfo":{"status":"ok","timestamp":1718387222270,"user_tz":240,"elapsed":69,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":150,"outputs":[]},{"cell_type":"code","source":["cm.save_html(str(model_output_dir / \"reports\" / \"cm\"))"],"metadata":{"id":"-VZIB-lK9fIS","executionInfo":{"status":"ok","timestamp":1718387222270,"user_tz":240,"elapsed":68,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"ef569497-37dd-434a-ab5a-bfd3427ce85e"},"execution_count":151,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'Status': True,\n"," 'Message': '/content/drive/MyDrive/LangId Evaluation/facebook_mms-lid-4017 on PolyAI_minds14/2024-06-14_16-15-51/reports/cm.html'}"]},"metadata":{},"execution_count":151}]},{"cell_type":"code","source":[],"metadata":{"id":"E_Z6G8WAsioH","executionInfo":{"status":"ok","timestamp":1718387222271,"user_tz":240,"elapsed":58,"user":{"displayName":"Ian Wong","userId":"12114955118450350543"}}},"execution_count":151,"outputs":[]}]}